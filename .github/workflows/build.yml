name: Build

on:
  push:
    branches: [ ci_*, main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      use_cache:
        description: 'Indicates whether or not to use cached packages'
        required: true
        default: 'true'
        type: choice
        options:
        - true
        - false

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ "windows-latest", "ubuntu-20.04" ]
        platform: [ "x64" ]
        configuration: [ "debug", "release" ]
        experimental: [ false ]
        include:
          - os: "windows-latest"
            triplet_os: windows
            vcpkg_dir: C:/vcpkg/
          - os: "ubuntu-20.04"
            triplet_os: linux
            vcpkg_dir: /usr/local/share/vcpkg

    continue-on-error: ${{ matrix.experimental }}

    steps:
    - name: Checkout the sources
      uses: actions/checkout@v2

    - name: Update package registry
      if: runner.os == 'Linux'
      run: sudo apt update

      # For qt installation on linux machines some packages are missing
      # https://github.com/microsoft/vcpkg/issues/16486#issuecomment-789374352
    - name: Install dependent packages
      if: runner.os == 'Linux'
      id: install_deps
      run: >
        sudo apt install -y
        '^libxcb.*-dev'
        gperf
        libgl1-mesa-dev
        libglu1-mesa-dev
        libx11-dev
        libx11-xcb-dev
        libxext-dev
        libxfixes-dev
        libxi-dev
        libxkbcommon-dev
        libxkbcommon-x11-dev
        libxrender-dev
        build-essential
        gcc-10
        g++-10
        cpp-10 &&
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-10 100 --slave /usr/bin/g++ g++ /usr/bin/g++-10 --slave /usr/bin/gcov gcov /usr/bin/gcov-10

    - name: Try restore vcpkg cache
      # if: github.event == 'push' || github.event == 'pull_request' || github.events.inputs.use_cache == 'true'
      id: vcpkg_cache
      uses: actions/cache@v2
      with:
        path: ${{ matrix.vcpkg_dir }}/installed
        key: ${{ runner.os }}-${{ matrix.platform }}-pkgs

    - name: Install packages
      id: vcpkg_install
      if: steps.vcpkg_cache.outputs.cache-hit != 'true' && (steps.install_deps.conclusion == 'success' || steps.install_deps.conclusion  == 'skipped')
      run: vcpkg install qt5-base:${{ matrix.platform }}-${{ matrix.triplet_os }} boost-test:${{ matrix.platform }}-${{ matrix.triplet_os }} spdlog:${{ matrix.platform }}-${{ matrix.triplet_os }}

    - name: Collect vcpkg logs
      if: always() && steps.vcpkg_install.outcome == 'failure'
      uses: actions/upload-artifact@v2
      with:
        name: vcpkg_logs
        path: |
          ${{ matrix.vcpkg_dir }}/buildtrees/*/config-*-*.log
          ${{ matrix.vcpkg_dir }}/buildtrees/*/install-*-*.log

    - name: Create build dir
      if: contains(matrix.os, 'ubuntu')
      run: mkdir ${{ github.workspace }}/build -p

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: steps.vcpkg_cache.outputs.cache-hit == 'true' || steps.vcpkg_install.outcome == 'success'
      run: >
        cmake
        -B ${{ github.workspace }}/build
        -S ${{ github.workspace }}
        -DCMAKE_BUILD_TYPE=${{ matrix.configuration }}
        -DCMAKE_INSTALL_PREFIX:PATH="${{ github.workspace }}/build/install/${{ matrix.configuration }}_${{ matrix.platrofm }}"
        -DCMAKE_TOOLCHAIN_FILE="${{ matrix.vcpkg_dir }}/scripts/buildsystems/vcpkg.cmake"
        -DBUILD_TESTS=ON

    - name: Build solution
      run: cmake --build ${{ github.workspace }}/build --config ${{ matrix.configuration }} -j4

    - name: Run tests
      run: ctest -j4 --test-dir ${{ github.workspace }}/build --output-on-failure -C ${{ matrix.configuration }}
